---
- name: Create Windows AD Virtual Machine
  vmware_guest:
    hostname: "{{ vcenter_hostname }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password }}"
    validate_certs: "{{ vcenter_validate_certs }}"
    datacenter: "{{ vcenter_datacenter }}"
    name: "{{ guest_hostname }}"
    folder: "{{ vm_folder }}"
    state: "{{ vm_state }}"
    guest_id: "{{ vm_guestid }}"
    esxi_hostname: "{{ esxi_host }}"
    template: "{{ template_name }}"
    disk:
      - size_gb: "{{ disk_size }}"
        type: thin
        datastore: "{{ vm_disk_datastore }}"
    hardware:
      memory_mb: "{{ guest_vram }}"
      num_cpus: "{{ guest_vcpu }}"
      scsi: "{{ vm_hw_scsi }}"
    networks:
      - name: "{{ vm_net_name }}"
        ip: "{{ inventory_hostname }}"
        netmask: "{{ netmask }}"
        gateway: "{{ gateway }}"
    customization:
      autologoncount: 1
      autologon: true
      hostname: "{{ guest_hostname }}"
      dns_servers:
        - "{{ dns1 }}"
        - "{{ dns2 }}"
      timezone: "{{ timezone }}"
      password: "{{ temp_password }}"
      # This powershell script is required for cross vlan WinRM to run the next tasks - Once playbook complete remove the firewall rule if needed
      runonce:
      - cmd /c echo New-NetFirewallRule -DisplayName "WinRM 5985" -Direction Inbound -LocalPort 5985 -Protocol TCP -RemoteAddress Any -Action Allow > C:\enable-winrm.ps1
      - powershell.exe -ExecutionPolicy Unrestricted -File C:\enable-winrm.ps1 -ForceNewSSLCert -EnableCredSSP
    wait_for_customization: yes
    wait_for_ip_address: True
    state: "{{ vm_state }}"
  delegate_to: localhost

- name: Add host to Ansible inventory
  add_host:
    name: '{{ inventory_hostname }}'
    ansible_user: '{{ local_admin }}'
    ansible_password: '{{ temp_password }}'
    ansible_connection: winrm
    ansible_winrm_transport: ntlm
    ansible_winrm_server_cert_validation: ignore
    ansible_winrm_port: 5985

- name: Wait for system to become reachable over WinRM
  wait_for_connection:
    timeout: 900
  delegate_to: '{{ inventory_hostname }}'

- name: Set upstream DNS server 
  win_dns_client:
    adapter_names: '*'
    ipv4_addresses:
    - '{{ upstream_dns_1 }}'
    - '{{ upstream_dns_2 }}'
  delegate_to: '{{ inventory_hostname }}'

- name: Stop the time service
  win_service:
    name: w32time
    state: stopped
  delegate_to: '{{ inventory_hostname }}'

- name: Set NTP Servers
  win_shell: 'w32tm /config /syncfromflags:manual /manualpeerlist:"{{ntp_servers}}"'
  delegate_to: '{{ inventory_hostname }}'  

- name: Start the time service
  win_service:
    name: w32time
    state: started  
  delegate_to: '{{ inventory_hostname }}'

- name: Disable firewall for Domain, Public and Private profiles
  win_firewall:
    state: disabled
    profiles:
    - Domain
    - Private
    - Public
  tags: disable_firewall
  delegate_to: '{{ inventory_hostname }}'

- name: Reboot server
  win_reboot:
   msg: "Rebooting..."
   pre_reboot_delay: 5
  delegate_to: "{{ inventory_hostname }}"

- name: Install Active Directory
  win_feature: >
       name=AD-Domain-Services
       include_management_tools=yes
       include_sub_features=yes
       state=present
  register: result
  delegate_to: '{{ inventory_hostname }}'

- name: Create Domain
  win_domain: >
     dns_domain_name='{{ domain }}'
     safe_mode_password='{{ recovery_password }}'
  register: ad
  delegate_to: "{{ inventory_hostname }}"

- name: Reboot server
  win_reboot:
   msg: "Installing AD. Rebooting..."
   pre_reboot_delay: 5
  when: ad.changed
  delegate_to: "{{ inventory_hostname }}"

- name: Set internal DNS server 
  win_dns_client:
    adapter_names: '*'
    ipv4_addresses:
    - '127.0.0.1'
  delegate_to: '{{ inventory_hostname }}'

- name: Create reverse DNS zone
  win_shell: "Add-DnsServerPrimaryZone -NetworkID {{reverse_dns_zone}} -ReplicationScope Forest"
  delegate_to: "{{ inventory_hostname }}"    
  retries: 30
  delay: 60
  register: result           
  until: result is succeeded

- name: Copy General PowerShell Scripts
  win_copy:
    src: scripts/powershell/general_scripts
    dest: C:/

- name: Copy AD PowerShell Scripts
  win_copy:
    src: scripts/powershell/ad_scripts
    dest: C:/

- name: Enable Remote Desktop
  win_command: powershell.exe -ExecutionPolicy ByPass -File C:/general_scripts/enable_rdp.ps1

- name: Import AD Users
  win_command: powershell.exe -ExecutionPolicy ByPass -File C:/ad_scripts/ad_import_users.ps1

- name: Add Users to Groups
  win_command: powershell.exe -ExecutionPolicy ByPass -File C:/ad_scripts/ad_assign_groups.ps1

- name: Enable firewall for Domain, Public and Private profiles
  win_firewall:
    state: enabled
    profiles:
    - Domain
    - Private
    - Public
  tags: disable_firewall
  delegate_to: '{{ inventory_hostname }}'

- name: Set Password
  win_user:
    name: administrator
    password: "{{dc_password}}"
    state: present
  delegate_to: '{{ inventory_hostname }}'
  ignore_errors: True  
